// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messenger.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	MessageBody          string   `protobuf:"bytes,1,opt,name=MessageBody,proto3" json:"MessageBody,omitempty"`
	Group                string   `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99aba0cbf4e4b91, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessageBody() string {
	if m != nil {
		return m.MessageBody
	}
	return ""
}

func (m *Message) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type Reponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Info                 string   `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reponse) Reset()         { *m = Reponse{} }
func (m *Reponse) String() string { return proto.CompactTextString(m) }
func (*Reponse) ProtoMessage()    {}
func (*Reponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b99aba0cbf4e4b91, []int{1}
}

func (m *Reponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reponse.Unmarshal(m, b)
}
func (m *Reponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reponse.Marshal(b, m, deterministic)
}
func (m *Reponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reponse.Merge(m, src)
}
func (m *Reponse) XXX_Size() int {
	return xxx_messageInfo_Reponse.Size(m)
}
func (m *Reponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Reponse.DiscardUnknown(m)
}

var xxx_messageInfo_Reponse proto.InternalMessageInfo

func (m *Reponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Reponse) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "messenger.Message")
	proto.RegisterType((*Reponse)(nil), "messenger.reponse")
}

func init() { proto.RegisterFile("messenger.proto", fileDescriptor_b99aba0cbf4e4b91) }

var fileDescriptor_b99aba0cbf4e4b91 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4d, 0x2d, 0x2e,
	0x4e, 0xcd, 0x4b, 0x4f, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x48,
	0x99, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xe7, 0x96, 0x67, 0x96,
	0x64, 0xe7, 0x97, 0xeb, 0xa7, 0xe7, 0xeb, 0x82, 0xd5, 0xe9, 0x96, 0x25, 0xe6, 0x64, 0xa6, 0x24,
	0x96, 0xe4, 0x17, 0x15, 0xeb, 0xc3, 0x99, 0x10, 0x23, 0x94, 0x1c, 0xb9, 0xd8, 0x7d, 0x53, 0x8b,
	0x8b, 0x13, 0xd3, 0x53, 0x85, 0x14, 0xb8, 0xb8, 0xa1, 0x4c, 0xa7, 0xfc, 0x94, 0x4a, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x64, 0x21, 0x21, 0x11, 0x2e, 0x56, 0xf7, 0xa2, 0xfc, 0xd2, 0x02,
	0x09, 0x26, 0xb0, 0x1c, 0x84, 0xa3, 0xa4, 0xcb, 0xc5, 0x5e, 0x94, 0x5a, 0x90, 0x9f, 0x57, 0x9c,
	0x2a, 0xc4, 0xc7, 0xc5, 0x94, 0x9f, 0x0d, 0xd6, 0xc9, 0x11, 0xc4, 0x94, 0x9f, 0x2d, 0x24, 0xc4,
	0xc5, 0x92, 0x99, 0x97, 0x96, 0x2f, 0xc1, 0x0c, 0x56, 0x0f, 0x66, 0x1b, 0xb9, 0x71, 0x21, 0x9c,
	0x2d, 0x64, 0xc9, 0xc5, 0x1d, 0x9c, 0x9a, 0x97, 0x02, 0x73, 0x82, 0x90, 0x1e, 0xc2, 0x8b, 0x50,
	0x31, 0x29, 0x64, 0x31, 0xa8, 0x3d, 0x1a, 0x8c, 0x06, 0x8c, 0x4e, 0x2c, 0x51, 0x4c, 0x05, 0x49,
	0x49, 0x6c, 0x60, 0x6f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x7f, 0x39, 0x5d, 0x1c,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessengerClient interface {
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (Messenger_SendMessageClient, error)
}

type messengerClient struct {
	cc *grpc.ClientConn
}

func NewMessengerClient(cc *grpc.ClientConn) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (Messenger_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messenger_serviceDesc.Streams[0], "/messenger.messenger/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerSendMessageClient{stream}
	return x, nil
}

type Messenger_SendMessageClient interface {
	Send(*Message) error
	Recv() (*Reponse, error)
	grpc.ClientStream
}

type messengerSendMessageClient struct {
	grpc.ClientStream
}

func (x *messengerSendMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerSendMessageClient) Recv() (*Reponse, error) {
	m := new(Reponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServer is the server API for Messenger service.
type MessengerServer interface {
	SendMessage(Messenger_SendMessageServer) error
}

// UnimplementedMessengerServer can be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (*UnimplementedMessengerServer) SendMessage(srv Messenger_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}

func RegisterMessengerServer(s *grpc.Server, srv MessengerServer) {
	s.RegisterService(&_Messenger_serviceDesc, srv)
}

func _Messenger_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).SendMessage(&messengerSendMessageServer{stream})
}

type Messenger_SendMessageServer interface {
	Send(*Reponse) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messengerSendMessageServer struct {
	grpc.ServerStream
}

func (x *messengerSendMessageServer) Send(m *Reponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerSendMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Messenger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messenger.messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _Messenger_SendMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
